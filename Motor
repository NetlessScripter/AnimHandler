return function(model, preferredType)
    if not (model and typeof(model) == "Instance" and model:IsA("Model")) then
        return {}, nil
    end
    local motors = {}
    local typeToUse = "Motor6D"
    for _, desc in ipairs(model:GetDescendants()) do
        if desc:IsA("Bone") then
            typeToUse = "Bone"
            break
        end
    end
    if preferredType == "Motor6D" or preferredType == "Bone" then
        typeToUse = preferredType
    end
    if typeToUse == "Motor6D" then
        for _, part in ipairs(model:GetDescendants()) do
            if part:IsA("BasePart") then
                for _, joint in ipairs(part:GetJoints()) do
                    if joint:IsA("Motor6D") and joint.Part1 == part then
                        motors[part.Name] = joint
                        break
                    end
                end
            end
        end
    else
        for _, bone in ipairs(model:GetDescendants()) do
            if bone:IsA("Bone") then
                motors[bone.Name] = bone
            end
        end
    end
    return motors, typeToUse
end
