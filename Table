local InsertService = game:GetService("InsertService")
local KeyboardService = game:GetService("KeyboardService")
local MarketplaceService = game:GetService("MarketplaceService")

local EasingStyles = Enum.EasingStyle
local EasingDirections = Enum.EasingDirection
local PoseEasingStylePrefix = #"Enum.PoseEasingStyle."
local PoseEasingDirectionPrefix = #"Enum.PoseEasingDirection."

local table_create = table.create

local function EasingStyleFix(style: Enum.PoseEasingStyle): Enum.EasingStyle
    style = string.sub(tostring(style), PoseEasingStylePrefix + 1, -1)
    return EasingStyles[style]
end

local function EasingDirectionFix(style: Enum.PoseEasingDirection): Enum.EasingDirection
    style = string.sub(tostring(style), PoseEasingDirectionPrefix + 1, -1)
    return EasingDirections[style]
end

local regularTBL = table_create(0)

return function(AnimationInstance: KeyframeSequence): ({}, boolean, Enum.AnimationPriority)
    if AnimationInstance == nil then
        error("AnimationInstance can't be nil")
    end
    if typeof(AnimationInstance) ~= "Instance" then
        return regularTBL
    end

    local KeyFrames = AnimationInstance:GetKeyframes()
    local Sequence = table_create(#KeyFrames)

    for _, keyframe: Keyframe in KeyFrames do
        local Class = {}
        local ClassData = {}

        Class.Time = keyframe.Time
        local Poses = keyframe:GetDescendants()

        for _, obj: KeyframeMarker | Pose in Poses do
            if obj:IsA("KeyframeMarker") then
                Class.Events = Class.Events or {}
                table.insert(Class.Events, {
                    Name = obj.Name,
                    Value = obj.Value
                })
                continue
            end

            if obj:IsA("Pose") then
                if obj.Weight == 0 then
                    continue
                end
                ClassData[obj.Name] = {
                    CFrame = obj.CFrame,
                    EasingStyle = EasingStyleFix(obj.EasingStyle),
                    EasingDirection = EasingDirectionFix(obj.EasingDirection),
                    Weight = obj.Weight or 0
                }
            end
        end

        Class.Data = ClassData
        table.insert(Sequence, Class)
    end

    table.sort(Sequence, function(a, b)
        return a.Time < b.Time
    end)

    return Sequence, AnimationInstance.Loop, AnimationInstance.Priority
end
